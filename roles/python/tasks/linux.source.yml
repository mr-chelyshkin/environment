---

- name: "[linux.source] install"
  become: true
  block:
    - name: Install apt deps
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - make
        - gcc
        - ccache
        - zlib1g-dev
        - libffi-dev
        - libssl-dev
      when: ansible_pkg_mgr == 'apt'
    - name: Install yum deps
      yum:
        name: "{{ item }}"
        state: present
      loop:
        - make
        - gcc
        - ccache
        - zlib-devel
        - libffi-devel
        - openssl-devel
      when: ansible_pkg_mgr == 'yum'
    - name: Download sources
      get_url:
        url: "https://www.python.org/ftp/python/{{ python_version }}/Python-{{ python_version }}.tar.xz"
        dest: "/tmp/Python-{{ python_version }}.tar.xz"
        mode: '0755'
    - name: Extract sources
      unarchive:
        src: "/tmp/Python-{{ python_version }}.tar.xz"
        dest: "/tmp"
        remote_src: yes
    - name: Set CC env
      set_fact:
        ansible_env:
          CC: "ccache gcc"
    - name: Configure
      command:
        cmd: "./configure --enable-optimizations --without-tests --without-tk --prefix=/usr/local"
        chdir: "/tmp/Python-{{ python_version }}"
    - name: Compile
      command:
        cmd: "make -j{{ ansible_processor_cores }}"
        chdir: "/tmp/Python-{{ python_version }}"
    - name: Install
      command:
        cmd: "make altinstall"
        chdir: "/tmp/Python-{{ python_version }}"
    - name: Prepare pip
      file:
        src: "/usr/local/bin/pip{{ python_version | regex_replace('^([0-9]+\\.[0-9]+).*', '\\1') }}"
        dest: /usr/local/bin/pip3
        state: link
    - name: Cleanup
      command:
        cmd: "rm -rf /tmp/Python-{{ python_version }}"
  when:
    - python_version is defined
    - ansible_os_family == "Debian" or ansible_os_family == "RedHat"